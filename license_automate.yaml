---
- name: Fetch Pending ServiceNow Requests
  hosts: localhost
  gather_facts: no
  vars:
    servicenow_instance: "https://dev247928.service-now.com"
    servicenow_username: "admin"
    servicenow_password: "password"
    servicenow_table: "sc_request"
    tenant_id: "tenant-id"
    client_id: "client-id"
    client_secret: "client-secret"
    graph_api_endpoint: "https://graph.microsoft.com/v1.0"

  tasks:
    - name: Fetch pending requests from ServiceNow
      uri:
        url: "{{ servicenow_instance }}/api/now/table/{{ servicenow_table }}?sysparm_query=request_state=requested"
        method: GET
        user: "{{ servicenow_username }}"
        password: "{{ servicenow_password }}"
        force_basic_auth: yes
        return_content: yes
      register: servicenow_response

    - name: Store Requested License Type
      set_fact:
        requested_license_map: >-
          {{
            servicenow_response.json.result |
            items2dict(key_name='sys_id', value_name='short_description')
          }}

    - name: Display request details
      debug:
        msg: "{{ requested_license_map }}"

    - name: Get Azure access token
      uri:
        url: "https://login.microsoftonline.com/{{ tenant_id }}/oauth2/v2.0/token"
        method: POST
        body:
          client_id: "{{ client_id }}"
          client_secret: "{{ client_secret }}"
          scope: "https://graph.microsoft.com/.default"
          grant_type: "client_credentials"
        body_format: form-urlencoded
        return_content: yes
      register: azure_auth_response

    - name: Set Azure token
      set_fact:
        access_token: "{{ azure_auth_response.json.access_token }}"

    - name: Manually Set License Data for Testing
      set_fact:
        azure_license_response:
          json:
            value:
              - skuPartNumber: "dummy-license-1"
                prepaidUnits:
                  enabled: 10
                consumedUnits: 7

    - name: Debug available Azure licenses
      debug:
        msg: "{{ azure_license_response.json.value }}"

    - name: Process License Approval
      block:
        - name: Check License Availability
          set_fact:
            approval_status_map: >-
              {%- set status_map = {} -%}
              {%- for sys_id, license_type in requested_license_map.items() -%}
                {%- set clean_license_type = license_type | lower | regex_replace(' requested', '') -%}
                {%- set found = false -%}
                {%- for license in azure_license_response.json.value -%}
                  {%- if license.skuPartNumber | lower == clean_license_type and license.prepaidUnits.enabled > license.consumedUnits -%}
                    {%- set _ = status_map.update({sys_id: {'approval': 'approved', 'sys_id': sys_id }}) -%}
                    {%- set found = true -%}
                  {%- endif -%}
                {%- endfor -%}
                {%- if not found -%}
                  {%- set _ = status_map.update({sys_id: {'approval': 'rejected', 'sys_id': sys_id }}) -%}
                {%- endif -%}
              {%- endfor -%}
              {{ status_map }}

        - name: Debug License Matching
          debug:
            msg: "Checking Requested License: {{ clean_license_type }} against Azure License: {{ license.skuPartNumber }} (Enabled: {{ license.prepaidUnits.enabled }}, Consumed: {{ license.consumedUnits }})"

        - name: Debug approval status mapping
          debug:
            msg: "Approval Status Map: {{ approval_status_map }}"

        - name: Update Approval Status in ServiceNow
          uri:
            url: "{{ servicenow_instance }}/api/now/table/{{ servicenow_table }}/{{ item.value.sys_id }}"
            method: PATCH
            user: "{{ servicenow_username }}"
            password: "{{ servicenow_password }}"
            force_basic_auth: yes
            headers:
              Content-Type: "application/json"
            body_format: json
            body:
              approval: "{{ item.value.approval }}"
            return_content: yes
          loop: "{{ approval_status_map | dict2items }}"
          when: approval_status_map is not none

        - name: Display Approval Results
          debug:
            msg: 
              - "Approval Status Updated: {{ approval_status_map }}"
