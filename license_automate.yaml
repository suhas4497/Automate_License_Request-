---
- name: Fetch Pending ServiceNow Requests
  hosts: localhost
  gather_facts: no
  vars:
    servicenow_instance: "https://dev247928.service-now.com"
    servicenow_username: "admin"
    servicenow_password: "%ml4Vs9RXE/s"
    servicenow_table: "sc_request"
    tenant_id: "195e8969-c853-47b4-83d0-36e044d83923"
    client_id: "e2e46ae3-2dee-4eed-a074-ddffd760ab2b"
    client_secret: "PQZ8Q~XSmMsU4dbgk2KyWMHK1h8X7ciD~H.1_csi"
    graph_api_endpoint: "https://graph.microsoft.com/v1.0"

  tasks:
    - name: Fetch pending requests from ServiceNow
      uri:
        url: "{{ servicenow_instance }}/api/now/table/{{ servicenow_table }}?sysparm_query=request_state=requested"
        method: GET
        user: "{{ servicenow_username }}"
        password: "{{ servicenow_password }}"
        force_basic_auth: yes
        return_content: yes
      register: servicenow_response

    - name: Store Requested License Type
      set_fact:
        requested_license_map: >-
          {{
            servicenow_response.json.result |
            items2dict(key_name='number', value_name='short_description')
          }}

    - name: Get Azure access token
      uri:
        url: "https://login.microsoftonline.com/{{ tenant_id }}/oauth2/v2.0/token"
        method: POST
        body:
          client_id: "{{ client_id }}"
          client_secret: "{{ client_secret }}"
          scope: "https://graph.microsoft.com/.default"
          grant_type: "client_credentials"
        body_format: form-urlencoded
        return_content: yes
      register: azure_auth_response

    - name: Set Azure token
      set_fact:
        access_token: "{{ azure_auth_response.json.access_token }}"

    - name: Check License Availability in Azure
      uri:
        url: "{{ graph_api_endpoint }}/subscribedSkus"
        method: GET
        headers:
          Authorization: "Bearer {{ access_token }}"
          Content-Type: "application/json"
        return_content: yes
      register: azure_license_response

    - name: Add dummy license data for testing (remove this after real licenses are available)
      set_fact:
        azure_license_response:
          json:
            value:
              - id: "dummy-license-1"
                skuPartNumber: "TEST_LICENSE_1"
                prepaidUnits:
                  enabled: 5
                consumedUnits: 3
              - id: "dummy-license-2"
                skuPartNumber: "TEST_LICENSE_2"
                prepaidUnits:
                  enabled: 10
                consumedUnits: 7

    - name: Determine approval status based on license availability
      set_fact:
        approval_status_map: >-
          {{
            requested_license_map | 
            dict2items | 
            items2dict(
              key_name='key', 
              value_name='value',
              value=lambda item: 'approved' if item.value in (azure_license_response.json.value | map(attribute='skuPartNumber') | list) else 'rejected'
            )
          }}

    - name: Verify if Request Exists in ServiceNow
      uri:
        url: "{{ servicenow_instance }}/api/now/table/{{ servicenow_table }}?sysparm_query=number={{ item.key }}"
        method: GET
        user: "{{ servicenow_username }}"
        password: "{{ servicenow_password }}"
        force_basic_auth: yes
        return_content: yes
      register: request_check
      failed_when: request_check.json.result | length == 0
      loop: "{{ approval_status_map | dict2items }}"

    - name: Update Approval Status in ServiceNow
      uri:
        url: "{{ servicenow_instance }}/api/now/table/{{ servicenow_table }}/{{ request_check.results[item.index].json.result[0].sys_id }}"
        method: PATCH
        user: "{{ servicenow_username }}"
        password: "{{ servicenow_password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          approval: "{{ item.value }}"
        return_content: yes
      loop: "{{ approval_status_map | dict2items }}"
      loop_control:
        index_var: index
      when: request_check.results[item.index].json.result | length > 0

    - name: Display request approval results
      debug:
        msg: "Request {{ item.key }} has been {{ item.value }}"
      loop: "{{ approval_status_map | dict2items }}"
